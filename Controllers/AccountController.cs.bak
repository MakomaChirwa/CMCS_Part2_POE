using CMCS.Models;
using CMCS.ViewModels;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CMCS.Controllers
{
    public class AccountController : Controller
    {
        private readonly UserManager<IdentityUser> _userManager;
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly RoleManager<IdentityRole> _roleManager;

        public AccountController(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            RoleManager<IdentityRole> roleManager)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _roleManager = roleManager;
        }

        // ? Register (GET)
        [HttpGet]
        public IActionResult Register()
        {
            var roles = new List<SelectListItem>
            {
                new SelectListItem { Value = "Lecturer", Text = "Lecturer" },
                new SelectListItem { Value = "AcademicManager", Text = "Academic Manager" },
                new SelectListItem { Value = "ProgrammeManager", Text = "Programme Manager" }
            };

            var model = new RegisterViewModel
            {
                RolesList = roles
            };

            return View(model);
        }

        // ? Register (POST)
        [HttpPost]
        public async Task<IActionResult> Register(RegisterViewModel vm)
        {
            if (!ModelState.IsValid) return View(vm);

            var user = new IdentityUser { UserName = vm.Email, Email = vm.Email, EmailConfirmed = true };
            var result = await _userManager.CreateAsync(user, vm.Password);

            if (result.Succeeded)
            {
                if (!await _roleManager.RoleExistsAsync(vm.Role))
                    await _roleManager.CreateAsync(new IdentityRole(vm.Role));

                await _userManager.AddToRoleAsync(user, vm.Role);
                await _signInManager.SignInAsync(user, isPersistent: false);

                return RedirectToAction("Index", "Home");
            }

            ModelState.AddModelError(string.Empty, string.Join("; ", result.Errors.Select(e => e.Description)));
            return View(vm);
        }

        // ? Login (GET)
        [HttpGet]
        public IActionResult Login(string returnUrl = null)
            => View(new LoginViewModel { ReturnUrl = returnUrl });

        // ? Login (POST)
        [HttpPost]
        public async Task<IActionResult> Login(LoginViewModel vm)
        {
            if (!ModelState.IsValid) return View(vm);

            var result = await _signInManager.PasswordSignInAsync(
                vm.Email, vm.Password, vm.RememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
                return Redirect(vm.ReturnUrl ?? "/");

            ModelState.AddModelError(string.Empty, "Invalid login attempt.");
            return View(vm);
        }

        // ? Logout
        [HttpPost]
        public async Task<IActionResult> Logout()
        {
            await _signInManager.SignOutAsync();
            return RedirectToAction("Index", "Home");
        }
    }
}
